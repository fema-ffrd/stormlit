name: Build and Deploy

on:
  push:
    branches: [ 'main', 'dev' ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # tag events
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # branch events
            type=ref,event=branch
            # set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }} # only push if not a PR
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-infrastructure:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pipenv'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name : Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.3"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::894169284666:role/Stormlit-Deployment-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        working-directory: ./iac
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install

      - name: Deploy with CDKTF
        working-directory: ./iac
        env:
          AWS_REGION: us-east-1
          TF_VAR_streamlit_tag: latest
          TF_VAR_streamlit_dev_tag: dev
        run: pipenv run npx cdktf-cli@0.20.3 deploy stormlit-development-network stormlit-development-database stormlit-development-application --auto-approve
