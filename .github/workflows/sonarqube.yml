name: SonarQube Analysis

permissions:
  contents: read

on:
  workflow_call:
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM UTC

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Wait for SonarQube
        run: |
          timeout 300 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do sleep 5; done'
      
      - name: Generate SonarQube token
        run: |
          # Wait a bit more for SonarQube to be fully ready
          sleep 10
          # Generate a token using the default admin:admin credentials
          TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate?name=github-actions" | jq -r '.token')
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
      
      - name: Setup SonarQube Scanner
        uses: warchant/setup-sonar-scanner@v8
      
      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=stormlit \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.exclusions="**/*.yml,**/*.yaml,**/*.json,**/node_modules/**,**/cdktf.out/**"
      
      - name: Extract SonarQube Results
        run: |
          # Wait for analysis to be processed
          sleep 15
          
          echo "## SonarQube Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get project measures
          MEASURES=$(curl -s -u admin:admin "http://localhost:9000/api/measures/component?component=stormlit&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating")
          
          if echo "$MEASURES" | jq -e '.component.measures' > /dev/null 2>&1; then
            echo "### Key Metrics:" >> $GITHUB_STEP_SUMMARY
            echo "$MEASURES" | jq -r '.component.measures[] | "- **\(.metric)**: \(.value // "N/A")"' >> $GITHUB_STEP_SUMMARY
          else
            echo "### Key Metrics:" >> $GITHUB_STEP_SUMMARY
            echo "- Unable to retrieve metrics data" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Get issues summary
          ISSUES=$(curl -s -u admin:admin "http://localhost:9000/api/issues/search?componentKeys=stormlit&facets=severities,types")
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if echo "$ISSUES" | jq -e '.facets' > /dev/null 2>&1; then
            echo "### Issues Summary:" >> $GITHUB_STEP_SUMMARY
            
            # Check if there are any issues
            TOTAL_ISSUES=$(echo "$ISSUES" | jq -r '.total // 0')
            if [ "$TOTAL_ISSUES" -eq 0 ]; then
              echo "- No issues found! âœ…" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Total Issues:** $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Show breakdown by severity
              if echo "$ISSUES" | jq -e '.facets[] | select(.property == "severities")' > /dev/null 2>&1; then
                echo "**By Severity:**" >> $GITHUB_STEP_SUMMARY
                echo "$ISSUES" | jq -r '.facets[] | select(.property == "severities") | .values[] | "- \(.val): \(.count)"' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
              
              # Show breakdown by type
              if echo "$ISSUES" | jq -e '.facets[] | select(.property == "types")' > /dev/null 2>&1; then
                echo "**By Type:**" >> $GITHUB_STEP_SUMMARY
                echo "$ISSUES" | jq -r '.facets[] | select(.property == "types") | .values[] | "- \(.val): \(.count)"' >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "### Issues Summary:" >> $GITHUB_STEP_SUMMARY
            echo "- Unable to retrieve issues data" >> $GITHUB_STEP_SUMMARY
          fi