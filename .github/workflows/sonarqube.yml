name: SonarQube Analysis

permissions:
  contents: read

on:
  workflow_call:
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM UTC

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Wait for SonarQube
        run: |
          timeout 300 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do sleep 5; done'
      
      - name: Generate SonarQube token
        run: |
          # Wait a bit more for SonarQube to be fully ready
          sleep 10
          # Generate a token using the default admin:admin credentials
          TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate?name=github-actions" | jq -r '.token')
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
      
      - name: Setup SonarQube Scanner
        uses: warchant/setup-sonar-scanner@v8
      
      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=stormlit \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.exclusions="**/*.yml,**/*.yaml,**/*.json,**/node_modules/**,**/cdktf.out/**"
      
      - name: Get SonarQube Results
        run: |
          # Wait for analysis to be processed
          sleep 15
          
          echo "## SonarQube Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check SonarQube status
          echo "Checking SonarQube status..."
          STATUS=$(curl -s http://localhost:9000/api/system/status)
          echo "SonarQube Status: $STATUS"
          
          # Get project measures with error handling
          echo "Fetching project measures..."
          MEASURES_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -u admin:admin "http://localhost:9000/api/measures/component?component=stormlit&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating")
          HTTP_CODE=$(echo "$MEASURES_RESPONSE" | grep -o 'HTTP_CODE:[0-9]*' | cut -d: -f2)
          MEASURES=$(echo "$MEASURES_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
          
          echo "Measures API Response Code: $HTTP_CODE"
          echo "Measures Response: $MEASURES"
          
          if [ "$HTTP_CODE" = "200" ] && [ -n "$MEASURES" ]; then
            echo "### Key Metrics:" >> $GITHUB_STEP_SUMMARY
            if echo "$MEASURES" | jq -e '.component.measures' > /dev/null 2>&1; then
              echo "$MEASURES" | jq -r '.component.measures[] | "- **\(.metric)**: \(.value // "N/A")"' >> $GITHUB_STEP_SUMMARY
            else
              echo "- No metrics data available" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Key Metrics:" >> $GITHUB_STEP_SUMMARY
            echo "- Failed to fetch metrics (HTTP: $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Get issues summary with error handling
          echo "Fetching issues..."
          ISSUES_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -u admin:admin "http://localhost:9000/api/issues/search?componentKeys=stormlit&facets=severities,types")
          ISSUES_HTTP_CODE=$(echo "$ISSUES_RESPONSE" | grep -o 'HTTP_CODE:[0-9]*' | cut -d: -f2)
          ISSUES=$(echo "$ISSUES_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
          
          echo "Issues API Response Code: $ISSUES_HTTP_CODE"
          echo "Issues Response: $ISSUES"
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$ISSUES_HTTP_CODE" = "200" ] && [ -n "$ISSUES" ]; then
            echo "### Issues Summary:" >> $GITHUB_STEP_SUMMARY
            if echo "$ISSUES" | jq -e '.facets' > /dev/null 2>&1; then
              SEVERITY_COUNT=$(echo "$ISSUES" | jq -r '.facets[] | select(.property == "severities") | .values[] | "\(.val): \(.count)"' | wc -l)
              TYPE_COUNT=$(echo "$ISSUES" | jq -r '.facets[] | select(.property == "types") | .values[] | "\(.val): \(.count)"' | wc -l)
              
              if [ "$SEVERITY_COUNT" -gt 0 ]; then
                echo "**By Severity:**" >> $GITHUB_STEP_SUMMARY
                echo "$ISSUES" | jq -r '.facets[] | select(.property == "severities") | .values[] | "- \(.val): \(.count)"' >> $GITHUB_STEP_SUMMARY
              fi
              
              if [ "$TYPE_COUNT" -gt 0 ]; then
                echo "**By Type:**" >> $GITHUB_STEP_SUMMARY
                echo "$ISSUES" | jq -r '.facets[] | select(.property == "types") | .values[] | "- \(.val): \(.count)"' >> $GITHUB_STEP_SUMMARY
              fi
              
              if [ "$SEVERITY_COUNT" -eq 0 ] && [ "$TYPE_COUNT" -eq 0 ]; then
                echo "- No issues found! âœ…" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- No issues data available" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Issues Summary:" >> $GITHUB_STEP_SUMMARY
            echo "- Failed to fetch issues (HTTP: $ISSUES_HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
          fi