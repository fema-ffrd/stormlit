name: Build and Deploy

on:
  push:
    branches: [ main, ci-cd-init ]

concurrency: 
  group: development-environment
  cancel-in-progress: false

env:
  AWS_REGION: us-east-2 # Must match region in config.py

permissions:
  id-token: write
  contents: read

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]
          then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
          fi

  build-containers:
    needs: get-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container: [
          {
            name: 'streamlit',
            dockerfile: './app/Dockerfile',
            context: './app'
          }
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::894169284666:role/Stormlit-Deployment-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.get-version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/stormlit-development-${{ matrix.container.name }}:$IMAGE_TAG -f ${{ matrix.container.dockerfile }} ${{ matrix.container.context }}
          docker push $ECR_REGISTRY/stormlit-development-${{ matrix.container.name }}:$IMAGE_TAG

  deploy-infrastructure:
    needs: [get-version, build-containers]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pipenv'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name : Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.3"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::894169284666:role/Stormlit-Deployment-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        working-directory: ./iac
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install

      - name: Deploy with CDKTF
        working-directory: ./iac
        env:
          TF_VAR_streamlit_tag: ${{ needs.get-version.outputs.version }}
          TF_VAR_migration_tag: ${{ needs.get-version.outputs.version }}
        run: pipenv run npx cdktf-cli@0.20.3 deploy stormlit-development-network stormlit-development-database stormlit-development-application --auto-approve
